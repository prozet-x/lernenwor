plugins {
	id 'application'
	id 'java'
	id 'org.liquibase.gradle' version '2.2.1'
	id 'org.springframework.boot' version '3.1.2-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.1.0'
}

group = 'home.prozet-x'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

application {
	mainClass = 'home.prozetx.lernenwor.LernenworApplication'
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/milestone' }
	maven { url 'https://repo.spring.io/snapshot' }
}

jar {
	manifest {
		attributes "Main-Class": "home.prozetx.lernenwor.LernenworApplication"
	}
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	from {
		configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	}
}

def env = project.hasProperty('env') ? project['env'] : 'prod'

// Определяем URL на основе выбранного окружения
def dbUrl = 'jdbc:postgresql://maindb:5432/central' // Значение по умолчанию для prod
if (env == 'dev' || env == 'dev-debug') {
	dbUrl = 'jdbc:postgresql://localhost:5432/central'
} else if (env == 'test') {
	dbUrl = 'jdbc:postgresql://testdb:5432/testcentral'
}

bootRun {
	if (project.hasProperty('env')) {
		if (project.getProperty('env') == 'dev-debug') {
			jvmArgs = [
					"-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005"
			]
		}
		// Передаем свойства в JVM
		systemProperty 'spring.datasource.url', dbUrl
		systemProperty 'spring.profiles.active', env
	}
}


dependencies {
	implementation(
			'org.springframework.boot:spring-boot-starter',
			'org.springframework.boot:spring-boot-starter-data-jpa',
			'org.springframework.boot:spring-boot-starter-validation',
			'org.springframework.boot:spring-boot-starter-web',
			'org.springframework.boot:spring-boot-starter-security',
			'org.liquibase:liquibase-core',
			'com.querydsl:querydsl-jpa:5.0.0:jakarta',
			'org.mapstruct:mapstruct:1.5.5.Final',
			'org.postgresql:postgresql:42.7.3'

	)
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

//	runtimeOnly 'com.h2database:h2'

	annotationProcessor(
			'org.projectlombok:lombok',
			'com.querydsl:querydsl-apt:5.0.0:jakarta',
			'jakarta.persistence:jakarta.persistence-api:3.1.0',
			'org.mapstruct:mapstruct-processor:1.5.5.Final'
	)
	compileOnly 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'

	liquibaseRuntime(
			sourceSets.main.output,
			'org.liquibase:liquibase-core',
			'info.picocli:picocli:4.7.1',
//			'com.h2database:h2',
			'org.postgresql:postgresql:42.7.3',
			'org.liquibase.ext:liquibase-hibernate6:4.21.1',
			'org.springframework.boot:spring-boot-starter-data-jpa',
			'org.springframework.boot:spring-boot-starter'
	)
}

liquibase {
	activities {
		main{
			changelogFile 'src/main/resources/db/changelog/db.changelog-master.yml'
			url dbUrl
			username 'postgres'
			password 'user1234'
			referenceUrl 'hibernate:spring:home.prozetx.lernenwor.domain' +
					'?dialect=org.hibernate.dialect.PostgreSQLDialect' +
					'&hibernate.physical_naming_strategy=org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy' +
					'&hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy'
//					org.hibernate.dialect.PostgreSQL95Dialect
//					'&hibernate.connection.driver_class=org.postgresql.Driver' +
//					'&hibernate.connection.url=jdbc:postgresql://maindb:5432/central' +
//					'&hibernate.connection.username=postgres' +
//					'&hibernate.connection.password=user1234' +
//					'&username=postgres' +
//					'&password=user1234'
//					'&hibernate.physical_naming_strategy=org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy' +
//					'&hibernate.implicit_naming_strategy=org.springframework.boot.orm.jpa.hibernate.SpringImplicitNamingStrategy' +
//					'&referenceDriver=liquibase.ext.hibernate.database.connection.HibernateDriver' //?????????
			logLevel 'debug'
		}
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

//diffChangelog.mustRunAfter build
